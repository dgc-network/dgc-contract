// This file is generated by rust-protobuf 2.10.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `payload.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_10_1;

#[derive(PartialEq,Clone,Default)]
pub struct PikePayload {
    // message fields
    pub action: PikePayload_Action,
    pub create_agent: ::protobuf::SingularPtrField<CreateAgentAction>,
    pub update_agent: ::protobuf::SingularPtrField<UpdateAgentAction>,
    pub create_organization: ::protobuf::SingularPtrField<CreateOrganizationAction>,
    pub update_organization: ::protobuf::SingularPtrField<UpdateOrganizationAction>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PikePayload {
    fn default() -> &'a PikePayload {
        <PikePayload as ::protobuf::Message>::default_instance()
    }
}

impl PikePayload {
    pub fn new() -> PikePayload {
        ::std::default::Default::default()
    }

    // .PikePayload.Action action = 1;


    pub fn get_action(&self) -> PikePayload_Action {
        self.action
    }
    pub fn clear_action(&mut self) {
        self.action = PikePayload_Action::ACTION_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_action(&mut self, v: PikePayload_Action) {
        self.action = v;
    }

    // .CreateAgentAction create_agent = 2;


    pub fn get_create_agent(&self) -> &CreateAgentAction {
        self.create_agent.as_ref().unwrap_or_else(|| CreateAgentAction::default_instance())
    }
    pub fn clear_create_agent(&mut self) {
        self.create_agent.clear();
    }

    pub fn has_create_agent(&self) -> bool {
        self.create_agent.is_some()
    }

    // Param is passed by value, moved
    pub fn set_create_agent(&mut self, v: CreateAgentAction) {
        self.create_agent = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_create_agent(&mut self) -> &mut CreateAgentAction {
        if self.create_agent.is_none() {
            self.create_agent.set_default();
        }
        self.create_agent.as_mut().unwrap()
    }

    // Take field
    pub fn take_create_agent(&mut self) -> CreateAgentAction {
        self.create_agent.take().unwrap_or_else(|| CreateAgentAction::new())
    }

    // .UpdateAgentAction update_agent = 3;


    pub fn get_update_agent(&self) -> &UpdateAgentAction {
        self.update_agent.as_ref().unwrap_or_else(|| UpdateAgentAction::default_instance())
    }
    pub fn clear_update_agent(&mut self) {
        self.update_agent.clear();
    }

    pub fn has_update_agent(&self) -> bool {
        self.update_agent.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update_agent(&mut self, v: UpdateAgentAction) {
        self.update_agent = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_update_agent(&mut self) -> &mut UpdateAgentAction {
        if self.update_agent.is_none() {
            self.update_agent.set_default();
        }
        self.update_agent.as_mut().unwrap()
    }

    // Take field
    pub fn take_update_agent(&mut self) -> UpdateAgentAction {
        self.update_agent.take().unwrap_or_else(|| UpdateAgentAction::new())
    }

    // .CreateOrganizationAction create_organization = 4;


    pub fn get_create_organization(&self) -> &CreateOrganizationAction {
        self.create_organization.as_ref().unwrap_or_else(|| CreateOrganizationAction::default_instance())
    }
    pub fn clear_create_organization(&mut self) {
        self.create_organization.clear();
    }

    pub fn has_create_organization(&self) -> bool {
        self.create_organization.is_some()
    }

    // Param is passed by value, moved
    pub fn set_create_organization(&mut self, v: CreateOrganizationAction) {
        self.create_organization = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_create_organization(&mut self) -> &mut CreateOrganizationAction {
        if self.create_organization.is_none() {
            self.create_organization.set_default();
        }
        self.create_organization.as_mut().unwrap()
    }

    // Take field
    pub fn take_create_organization(&mut self) -> CreateOrganizationAction {
        self.create_organization.take().unwrap_or_else(|| CreateOrganizationAction::new())
    }

    // .UpdateOrganizationAction update_organization = 5;


    pub fn get_update_organization(&self) -> &UpdateOrganizationAction {
        self.update_organization.as_ref().unwrap_or_else(|| UpdateOrganizationAction::default_instance())
    }
    pub fn clear_update_organization(&mut self) {
        self.update_organization.clear();
    }

    pub fn has_update_organization(&self) -> bool {
        self.update_organization.is_some()
    }

    // Param is passed by value, moved
    pub fn set_update_organization(&mut self, v: UpdateOrganizationAction) {
        self.update_organization = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_update_organization(&mut self) -> &mut UpdateOrganizationAction {
        if self.update_organization.is_none() {
            self.update_organization.set_default();
        }
        self.update_organization.as_mut().unwrap()
    }

    // Take field
    pub fn take_update_organization(&mut self) -> UpdateOrganizationAction {
        self.update_organization.take().unwrap_or_else(|| UpdateOrganizationAction::new())
    }
}

impl ::protobuf::Message for PikePayload {
    fn is_initialized(&self) -> bool {
        for v in &self.create_agent {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.update_agent {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.create_organization {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.update_organization {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.action, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.create_agent)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.update_agent)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.create_organization)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.update_organization)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.action != PikePayload_Action::ACTION_UNSET {
            my_size += ::protobuf::rt::enum_size(1, self.action);
        }
        if let Some(ref v) = self.create_agent.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.update_agent.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.create_organization.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.update_organization.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.action != PikePayload_Action::ACTION_UNSET {
            os.write_enum(1, self.action.value())?;
        }
        if let Some(ref v) = self.create_agent.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.update_agent.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.create_organization.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.update_organization.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PikePayload {
        PikePayload::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<PikePayload_Action>>(
                    "action",
                    |m: &PikePayload| { &m.action },
                    |m: &mut PikePayload| { &mut m.action },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CreateAgentAction>>(
                    "create_agent",
                    |m: &PikePayload| { &m.create_agent },
                    |m: &mut PikePayload| { &mut m.create_agent },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<UpdateAgentAction>>(
                    "update_agent",
                    |m: &PikePayload| { &m.update_agent },
                    |m: &mut PikePayload| { &mut m.update_agent },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CreateOrganizationAction>>(
                    "create_organization",
                    |m: &PikePayload| { &m.create_organization },
                    |m: &mut PikePayload| { &mut m.create_organization },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<UpdateOrganizationAction>>(
                    "update_organization",
                    |m: &PikePayload| { &m.update_organization },
                    |m: &mut PikePayload| { &mut m.update_organization },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PikePayload>(
                    "PikePayload",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PikePayload {
        static mut instance: ::protobuf::lazy::Lazy<PikePayload> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PikePayload,
        };
        unsafe {
            instance.get(PikePayload::new)
        }
    }
}

impl ::protobuf::Clear for PikePayload {
    fn clear(&mut self) {
        self.action = PikePayload_Action::ACTION_UNSET;
        self.create_agent.clear();
        self.update_agent.clear();
        self.create_organization.clear();
        self.update_organization.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PikePayload {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PikePayload {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum PikePayload_Action {
    ACTION_UNSET = 0,
    CREATE_AGENT = 1,
    UPDATE_AGENT = 2,
    CREATE_ORGANIZATION = 3,
    UPDATE_ORGANIZATION = 4,
    CREATE_SMART_PERMISSION = 5,
    UPDATE_SMART_PERMISSION = 6,
    DELETE_SMART_PERMISSION = 7,
}

impl ::protobuf::ProtobufEnum for PikePayload_Action {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<PikePayload_Action> {
        match value {
            0 => ::std::option::Option::Some(PikePayload_Action::ACTION_UNSET),
            1 => ::std::option::Option::Some(PikePayload_Action::CREATE_AGENT),
            2 => ::std::option::Option::Some(PikePayload_Action::UPDATE_AGENT),
            3 => ::std::option::Option::Some(PikePayload_Action::CREATE_ORGANIZATION),
            4 => ::std::option::Option::Some(PikePayload_Action::UPDATE_ORGANIZATION),
            5 => ::std::option::Option::Some(PikePayload_Action::CREATE_SMART_PERMISSION),
            6 => ::std::option::Option::Some(PikePayload_Action::UPDATE_SMART_PERMISSION),
            7 => ::std::option::Option::Some(PikePayload_Action::DELETE_SMART_PERMISSION),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [PikePayload_Action] = &[
            PikePayload_Action::ACTION_UNSET,
            PikePayload_Action::CREATE_AGENT,
            PikePayload_Action::UPDATE_AGENT,
            PikePayload_Action::CREATE_ORGANIZATION,
            PikePayload_Action::UPDATE_ORGANIZATION,
            PikePayload_Action::CREATE_SMART_PERMISSION,
            PikePayload_Action::UPDATE_SMART_PERMISSION,
            PikePayload_Action::DELETE_SMART_PERMISSION,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("PikePayload_Action", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for PikePayload_Action {
}

impl ::std::default::Default for PikePayload_Action {
    fn default() -> Self {
        PikePayload_Action::ACTION_UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for PikePayload_Action {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateAgentAction {
    // message fields
    pub org_id: ::std::string::String,
    pub public_key: ::std::string::String,
    pub active: bool,
    pub roles: ::protobuf::RepeatedField<::std::string::String>,
    pub metadata: ::protobuf::RepeatedField<super::state::KeyValueEntry>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateAgentAction {
    fn default() -> &'a CreateAgentAction {
        <CreateAgentAction as ::protobuf::Message>::default_instance()
    }
}

impl CreateAgentAction {
    pub fn new() -> CreateAgentAction {
        ::std::default::Default::default()
    }

    // string org_id = 1;


    pub fn get_org_id(&self) -> &str {
        &self.org_id
    }
    pub fn clear_org_id(&mut self) {
        self.org_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_org_id(&mut self, v: ::std::string::String) {
        self.org_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_org_id(&mut self) -> &mut ::std::string::String {
        &mut self.org_id
    }

    // Take field
    pub fn take_org_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.org_id, ::std::string::String::new())
    }

    // string public_key = 2;


    pub fn get_public_key(&self) -> &str {
        &self.public_key
    }
    pub fn clear_public_key(&mut self) {
        self.public_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_public_key(&mut self, v: ::std::string::String) {
        self.public_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_key(&mut self) -> &mut ::std::string::String {
        &mut self.public_key
    }

    // Take field
    pub fn take_public_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.public_key, ::std::string::String::new())
    }

    // bool active = 3;


    pub fn get_active(&self) -> bool {
        self.active
    }
    pub fn clear_active(&mut self) {
        self.active = false;
    }

    // Param is passed by value, moved
    pub fn set_active(&mut self, v: bool) {
        self.active = v;
    }

    // repeated string roles = 4;


    pub fn get_roles(&self) -> &[::std::string::String] {
        &self.roles
    }
    pub fn clear_roles(&mut self) {
        self.roles.clear();
    }

    // Param is passed by value, moved
    pub fn set_roles(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.roles = v;
    }

    // Mutable pointer to the field.
    pub fn mut_roles(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.roles
    }

    // Take field
    pub fn take_roles(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.roles, ::protobuf::RepeatedField::new())
    }

    // repeated .KeyValueEntry metadata = 5;


    pub fn get_metadata(&self) -> &[super::state::KeyValueEntry] {
        &self.metadata
    }
    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: ::protobuf::RepeatedField<super::state::KeyValueEntry>) {
        self.metadata = v;
    }

    // Mutable pointer to the field.
    pub fn mut_metadata(&mut self) -> &mut ::protobuf::RepeatedField<super::state::KeyValueEntry> {
        &mut self.metadata
    }

    // Take field
    pub fn take_metadata(&mut self) -> ::protobuf::RepeatedField<super::state::KeyValueEntry> {
        ::std::mem::replace(&mut self.metadata, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for CreateAgentAction {
    fn is_initialized(&self) -> bool {
        for v in &self.metadata {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.org_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.public_key)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.active = tmp;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.roles)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.metadata)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.org_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.org_id);
        }
        if !self.public_key.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.public_key);
        }
        if self.active != false {
            my_size += 2;
        }
        for value in &self.roles {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        for value in &self.metadata {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.org_id.is_empty() {
            os.write_string(1, &self.org_id)?;
        }
        if !self.public_key.is_empty() {
            os.write_string(2, &self.public_key)?;
        }
        if self.active != false {
            os.write_bool(3, self.active)?;
        }
        for v in &self.roles {
            os.write_string(4, &v)?;
        };
        for v in &self.metadata {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateAgentAction {
        CreateAgentAction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "org_id",
                    |m: &CreateAgentAction| { &m.org_id },
                    |m: &mut CreateAgentAction| { &mut m.org_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "public_key",
                    |m: &CreateAgentAction| { &m.public_key },
                    |m: &mut CreateAgentAction| { &mut m.public_key },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "active",
                    |m: &CreateAgentAction| { &m.active },
                    |m: &mut CreateAgentAction| { &mut m.active },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "roles",
                    |m: &CreateAgentAction| { &m.roles },
                    |m: &mut CreateAgentAction| { &mut m.roles },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::state::KeyValueEntry>>(
                    "metadata",
                    |m: &CreateAgentAction| { &m.metadata },
                    |m: &mut CreateAgentAction| { &mut m.metadata },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateAgentAction>(
                    "CreateAgentAction",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateAgentAction {
        static mut instance: ::protobuf::lazy::Lazy<CreateAgentAction> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateAgentAction,
        };
        unsafe {
            instance.get(CreateAgentAction::new)
        }
    }
}

impl ::protobuf::Clear for CreateAgentAction {
    fn clear(&mut self) {
        self.org_id.clear();
        self.public_key.clear();
        self.active = false;
        self.roles.clear();
        self.metadata.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateAgentAction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateAgentAction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateAgentAction {
    // message fields
    pub org_id: ::std::string::String,
    pub public_key: ::std::string::String,
    pub active: bool,
    pub roles: ::protobuf::RepeatedField<::std::string::String>,
    pub metadata: ::protobuf::RepeatedField<super::state::KeyValueEntry>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateAgentAction {
    fn default() -> &'a UpdateAgentAction {
        <UpdateAgentAction as ::protobuf::Message>::default_instance()
    }
}

impl UpdateAgentAction {
    pub fn new() -> UpdateAgentAction {
        ::std::default::Default::default()
    }

    // string org_id = 1;


    pub fn get_org_id(&self) -> &str {
        &self.org_id
    }
    pub fn clear_org_id(&mut self) {
        self.org_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_org_id(&mut self, v: ::std::string::String) {
        self.org_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_org_id(&mut self) -> &mut ::std::string::String {
        &mut self.org_id
    }

    // Take field
    pub fn take_org_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.org_id, ::std::string::String::new())
    }

    // string public_key = 2;


    pub fn get_public_key(&self) -> &str {
        &self.public_key
    }
    pub fn clear_public_key(&mut self) {
        self.public_key.clear();
    }

    // Param is passed by value, moved
    pub fn set_public_key(&mut self, v: ::std::string::String) {
        self.public_key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_public_key(&mut self) -> &mut ::std::string::String {
        &mut self.public_key
    }

    // Take field
    pub fn take_public_key(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.public_key, ::std::string::String::new())
    }

    // bool active = 3;


    pub fn get_active(&self) -> bool {
        self.active
    }
    pub fn clear_active(&mut self) {
        self.active = false;
    }

    // Param is passed by value, moved
    pub fn set_active(&mut self, v: bool) {
        self.active = v;
    }

    // repeated string roles = 4;


    pub fn get_roles(&self) -> &[::std::string::String] {
        &self.roles
    }
    pub fn clear_roles(&mut self) {
        self.roles.clear();
    }

    // Param is passed by value, moved
    pub fn set_roles(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.roles = v;
    }

    // Mutable pointer to the field.
    pub fn mut_roles(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.roles
    }

    // Take field
    pub fn take_roles(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.roles, ::protobuf::RepeatedField::new())
    }

    // repeated .KeyValueEntry metadata = 5;


    pub fn get_metadata(&self) -> &[super::state::KeyValueEntry] {
        &self.metadata
    }
    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: ::protobuf::RepeatedField<super::state::KeyValueEntry>) {
        self.metadata = v;
    }

    // Mutable pointer to the field.
    pub fn mut_metadata(&mut self) -> &mut ::protobuf::RepeatedField<super::state::KeyValueEntry> {
        &mut self.metadata
    }

    // Take field
    pub fn take_metadata(&mut self) -> ::protobuf::RepeatedField<super::state::KeyValueEntry> {
        ::std::mem::replace(&mut self.metadata, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for UpdateAgentAction {
    fn is_initialized(&self) -> bool {
        for v in &self.metadata {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.org_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.public_key)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.active = tmp;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.roles)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.metadata)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.org_id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.org_id);
        }
        if !self.public_key.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.public_key);
        }
        if self.active != false {
            my_size += 2;
        }
        for value in &self.roles {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        for value in &self.metadata {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.org_id.is_empty() {
            os.write_string(1, &self.org_id)?;
        }
        if !self.public_key.is_empty() {
            os.write_string(2, &self.public_key)?;
        }
        if self.active != false {
            os.write_bool(3, self.active)?;
        }
        for v in &self.roles {
            os.write_string(4, &v)?;
        };
        for v in &self.metadata {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateAgentAction {
        UpdateAgentAction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "org_id",
                    |m: &UpdateAgentAction| { &m.org_id },
                    |m: &mut UpdateAgentAction| { &mut m.org_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "public_key",
                    |m: &UpdateAgentAction| { &m.public_key },
                    |m: &mut UpdateAgentAction| { &mut m.public_key },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "active",
                    |m: &UpdateAgentAction| { &m.active },
                    |m: &mut UpdateAgentAction| { &mut m.active },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "roles",
                    |m: &UpdateAgentAction| { &m.roles },
                    |m: &mut UpdateAgentAction| { &mut m.roles },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::state::KeyValueEntry>>(
                    "metadata",
                    |m: &UpdateAgentAction| { &m.metadata },
                    |m: &mut UpdateAgentAction| { &mut m.metadata },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UpdateAgentAction>(
                    "UpdateAgentAction",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UpdateAgentAction {
        static mut instance: ::protobuf::lazy::Lazy<UpdateAgentAction> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UpdateAgentAction,
        };
        unsafe {
            instance.get(UpdateAgentAction::new)
        }
    }
}

impl ::protobuf::Clear for UpdateAgentAction {
    fn clear(&mut self) {
        self.org_id.clear();
        self.public_key.clear();
        self.active = false;
        self.roles.clear();
        self.metadata.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateAgentAction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateAgentAction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateOrganizationAction {
    // message fields
    pub id: ::std::string::String,
    pub name: ::std::string::String,
    pub address: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateOrganizationAction {
    fn default() -> &'a CreateOrganizationAction {
        <CreateOrganizationAction as ::protobuf::Message>::default_instance()
    }
}

impl CreateOrganizationAction {
    pub fn new() -> CreateOrganizationAction {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string address = 3;


    pub fn get_address(&self) -> &str {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CreateOrganizationAction {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if !self.address.is_empty() {
            os.write_string(3, &self.address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateOrganizationAction {
        CreateOrganizationAction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &CreateOrganizationAction| { &m.id },
                    |m: &mut CreateOrganizationAction| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &CreateOrganizationAction| { &m.name },
                    |m: &mut CreateOrganizationAction| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "address",
                    |m: &CreateOrganizationAction| { &m.address },
                    |m: &mut CreateOrganizationAction| { &mut m.address },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateOrganizationAction>(
                    "CreateOrganizationAction",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateOrganizationAction {
        static mut instance: ::protobuf::lazy::Lazy<CreateOrganizationAction> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateOrganizationAction,
        };
        unsafe {
            instance.get(CreateOrganizationAction::new)
        }
    }
}

impl ::protobuf::Clear for CreateOrganizationAction {
    fn clear(&mut self) {
        self.id.clear();
        self.name.clear();
        self.address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateOrganizationAction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateOrganizationAction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateOrganizationAction {
    // message fields
    pub id: ::std::string::String,
    pub name: ::std::string::String,
    pub address: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateOrganizationAction {
    fn default() -> &'a UpdateOrganizationAction {
        <UpdateOrganizationAction as ::protobuf::Message>::default_instance()
    }
}

impl UpdateOrganizationAction {
    pub fn new() -> UpdateOrganizationAction {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string address = 3;


    pub fn get_address(&self) -> &str {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }
}

impl ::protobuf::Message for UpdateOrganizationAction {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if !self.address.is_empty() {
            os.write_string(3, &self.address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateOrganizationAction {
        UpdateOrganizationAction::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &UpdateOrganizationAction| { &m.id },
                    |m: &mut UpdateOrganizationAction| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &UpdateOrganizationAction| { &m.name },
                    |m: &mut UpdateOrganizationAction| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "address",
                    |m: &UpdateOrganizationAction| { &m.address },
                    |m: &mut UpdateOrganizationAction| { &mut m.address },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UpdateOrganizationAction>(
                    "UpdateOrganizationAction",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UpdateOrganizationAction {
        static mut instance: ::protobuf::lazy::Lazy<UpdateOrganizationAction> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UpdateOrganizationAction,
        };
        unsafe {
            instance.get(UpdateOrganizationAction::new)
        }
    }
}

impl ::protobuf::Clear for UpdateOrganizationAction {
    fn clear(&mut self) {
        self.id.clear();
        self.name.clear();
        self.address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateOrganizationAction {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateOrganizationAction {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rpayload.proto\x1a\x0bstate.proto\"\x8a\x04\n\x0bPikePayload\x12+\n\
    \x06action\x18\x01\x20\x01(\x0e2\x13.PikePayload.ActionR\x06action\x125\
    \n\x0ccreate_agent\x18\x02\x20\x01(\x0b2\x12.CreateAgentActionR\x0bcreat\
    eAgent\x125\n\x0cupdate_agent\x18\x03\x20\x01(\x0b2\x12.UpdateAgentActio\
    nR\x0bupdateAgent\x12J\n\x13create_organization\x18\x04\x20\x01(\x0b2\
    \x19.CreateOrganizationActionR\x12createOrganization\x12J\n\x13update_or\
    ganization\x18\x05\x20\x01(\x0b2\x19.UpdateOrganizationActionR\x12update\
    Organization\"\xc7\x01\n\x06Action\x12\x10\n\x0cACTION_UNSET\x10\0\x12\
    \x10\n\x0cCREATE_AGENT\x10\x01\x12\x10\n\x0cUPDATE_AGENT\x10\x02\x12\x17\
    \n\x13CREATE_ORGANIZATION\x10\x03\x12\x17\n\x13UPDATE_ORGANIZATION\x10\
    \x04\x12\x1b\n\x17CREATE_SMART_PERMISSION\x10\x05\x12\x1b\n\x17UPDATE_SM\
    ART_PERMISSION\x10\x06\x12\x1b\n\x17DELETE_SMART_PERMISSION\x10\x07\"\
    \xa3\x01\n\x11CreateAgentAction\x12\x15\n\x06org_id\x18\x01\x20\x01(\tR\
    \x05orgId\x12\x1d\n\npublic_key\x18\x02\x20\x01(\tR\tpublicKey\x12\x16\n\
    \x06active\x18\x03\x20\x01(\x08R\x06active\x12\x14\n\x05roles\x18\x04\
    \x20\x03(\tR\x05roles\x12*\n\x08metadata\x18\x05\x20\x03(\x0b2\x0e.KeyVa\
    lueEntryR\x08metadata\"\xa3\x01\n\x11UpdateAgentAction\x12\x15\n\x06org_\
    id\x18\x01\x20\x01(\tR\x05orgId\x12\x1d\n\npublic_key\x18\x02\x20\x01(\t\
    R\tpublicKey\x12\x16\n\x06active\x18\x03\x20\x01(\x08R\x06active\x12\x14\
    \n\x05roles\x18\x04\x20\x03(\tR\x05roles\x12*\n\x08metadata\x18\x05\x20\
    \x03(\x0b2\x0e.KeyValueEntryR\x08metadata\"X\n\x18CreateOrganizationActi\
    on\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\x12\n\x04name\x18\x02\
    \x20\x01(\tR\x04name\x12\x18\n\x07address\x18\x03\x20\x01(\tR\x07address\
    \"X\n\x18UpdateOrganizationAction\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\
    \x02id\x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04name\x12\x18\n\x07addres\
    s\x18\x03\x20\x01(\tR\x07addressb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
